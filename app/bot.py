import os
import telebot
import psycopg2
import redis
import utils
import requests
import json
from check_correct import *
from telebot import types

db_conn = psycopg2.connect(os.getenv('DATABASE_URL'), sslmode='require')
redis_conn = redis.Redis.from_url(os.getenv('REDIS_URL'))

TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(
    TOKEN,
#    next_step_backend=utils.RedisHandlerBackend(redis_conn)
)

commands_list = ['/start', '/help', '/search', '/about', '/upload', '/cancel']

def call(message):
    if message.text == '/start':
        handle_start(message)
    elif message.text == '/search':
        handle_search(message)
    elif message.text == '/about':
        handle_about(message)
    elif message.text == '/upload':
        handle_upload(message)
    elif message.text == '/help':
        handle_help(message)


@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    about_start_msg = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å ' \
                '—É–¥–æ–±–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º. –ú—É–¥–ª –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö!\n\n' \
                '–í—ã –º–æ–∂–µ—Ç–µ:\n\n' \
                'üì§ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n' \
                'üîç –ò—Å–∫–∞—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —Ç–µ–º–∞–º\n' \
                'üìà –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–∞–≤–∞—è –¥—Ä—É–≥–∏–º ' \
                '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –¥–æ—Å—Ç–æ–π–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã—Å—Ç—Ä–µ–µ'
    
    bot.send_message(chat_id, about_start_msg)


@bot.message_handler(commands=['help'])
def handle_help(message):
    chat_id = message.chat.id
    about_help_msg = '–•—ç–π! –°–º–æ—Ç—Ä–∏, –≤–æ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n' \
                'üìå /start - –ø—Ä–æ—á—Ç–∏ –µ—â—ë —Ä–∞–∑–æ–∫ –Ω–µ–±–æ–ª—å—à—É—é —Å–ø—Ä–∞–≤–∫—É –æ–±–æ –º–Ω–µ!\n' \
                'üìå /search - –Ω–∞–π–¥–∏ –Ω—É–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –º–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!\n' \
                'üìå /upload - –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥—Ä—É–≥–∏–º!\n' \
                'üìå /about - —É–∑–Ω–∞–π —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n' \
                'üìå /cancel - –ø–µ—Ä–µ–¥—É–º–∞–ª? –æ—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞/–∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!\n' \
                'üìå /help - –ø–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–±—É–¥–µ—à—å:^)'

    bot.send_message(chat_id, about_help_msg)


@bot.message_handler(commands=['search'])
def handle_search(message):
    chat_id = message.chat.id
    about_search_msg = '–í–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å!üîç\n\n' \
                '–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏ /cancel'

    instruction = bot.send_message(chat_id, about_search_msg)
    bot.register_next_step_handler(instruction, check_query)


def check_query(message):
    count = 0
    notes = []
    text = message.text.upper()
    chat_id = message.chat.id
    if message.text in commands_list:
        handle_cancel(message, '–ø–æ–∏—Å–∫–∞')
        call(message)
    elif str(message.text)[0] == '/':
        message_failure = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, check_query)
    else:
        cursor = db_conn.cursor()
        cursor.execute("SELECT id, title, course, discipline, file_id FROM resources")
        rows = cursor.fetchall()
        for row in rows:
            if (row[1].upper().find(text) != -1 or str(row[2]).find(text) != -1 or \
                subjects[int(row[3]) - 1].find(text) != -1):
                note = (str(row[0]), row[1], int(row[2]), row[3], row[4])
                notes.append(note)
                count += 1
        if count == 0:
            message_failure = '–£–ø—Å, –ø–æ—Ö–æ–∂–µ, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –µ—â—ë –Ω–µ—Ç –≤ ' \
                '–º–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:( –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –ø–µ—Ä–≤—ã–º ' \
                '–∑–∞–≥—Ä—É–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ!'
            bot.send_message(chat_id, message_failure)
        else:
            notes.sort(key = lambda x: x[2])
            for note in notes:
                message_success = '–ú–∞—Ç–µ—Ä–∏–∞–ª: ' + note[1] + '\n–ö—É—Ä—Å: ' + str(note[2]) + '\n–ü—Ä–µ–¥–º–µ—Ç: ' + \
                        subjects[int(note[3]) - 1].capitalize() + '\n–§–∞–π–ª: '
                file_info = bot.get_file(note[4])
                file = 'https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path)
                markup = types.InlineKeyboardMarkup()
                btn_download = types.InlineKeyboardButton(text = '–°–∫–∞—á–∞—Ç—å', url = file)
                up_data = json.dumps({'ident': 'up', 'id': note[0]})
                btn_up = types.InlineKeyboardButton(text = "+1", callback_data = up_data)
                down_data = json.dumps({'ident': 'down', 'id': note[0]})
                btn_down = types.InlineKeyboardButton(text = "-1", callback_data = down_data)
                markup.add(btn_down, btn_download, btn_up)
                bot.send_message(chat_id, message_success, reply_markup = markup)
        cursor.close()

    
@bot.callback_query_handler(lambda query: json.loads(query.data)['ident'] == 'up')
def rating_up(query):
    user_id = query.from_user.id
    db_file_id = json.loads(query.data)['id']
    cursor = db_conn.cursor()
    cursor.execute("SELECT file_id FROM resources \
                WHERE id={}".format(db_file_id))
    rows = cursor.fetchall()
    file_id = rows[0][0]
    cursor.close()
    
    cursor = db_conn.cursor()
    cursor.execute("SELECT file_id, user_id, mark FROM marks \
                WHERE file_id='{}' AND user_id={}".format(file_id, str(user_id)))
    rows = cursor.fetchall()
    cursor.close()
    if (len(rows)):
        if (str(rows[0][2]) == '1'):
            cursor = db_conn.cursor()
            cursor.execute("UPDATE marks SET mark=0 \
                WHERE file_id='{}' AND user_id={}".format(file_id, str(user_id)))
            cursor.execute("UPDATE resources SET rating=rating-1 \
                WHERE file_id='{}'".format(file_id))
            cursor.close()
        else:
            cursor = db_conn.cursor()
            cursor.execute("UPDATE marks SET mark=1 \
                WHERE file_id='{}' AND user_id={}".format(file_id, str(user_id)))
            if (str(rows[0][2]) == '0'):
                cursor.execute("UPDATE resources SET rating=rating+1 \
                WHERE file_id='{}'".format(file_id))
            else:
                cursor.execute("UPDATE resources SET rating=rating+2 \
                WHERE file_id='{}'".format(file_id))
            cursor.close()
    else:
        cursor = db_conn.cursor()
        cursor.execute("INSERT INTO marks (file_id, user_id, mark) \
                VALUES ('{}', {}, {})".format(file_id, str(user_id), '1'))
        cursor.execute("UPDATE resources SET rating=rating+1 \
            WHERE file_id='{}'".format(file_id))
        cursor.close()
    db_conn.commit()


@bot.callback_query_handler(lambda query: json.loads(query.data)['ident'] == 'down')
def rating_down(query):
    user_id = query.from_user.id
    db_file_id = json.loads(query.data)['id']
    cursor = db_conn.cursor()
    cursor.execute("SELECT file_id FROM resources \
                WHERE id={}".format(db_file_id))
    rows = cursor.fetchall()
    file_id = rows[0][0]
    cursor.close()
    
    cursor = db_conn.cursor()
    cursor.execute("SELECT file_id, user_id, mark FROM marks \
                WHERE file_id='{}' AND user_id={}".format(file_id, str(user_id)))
    rows = cursor.fetchall()
    cursor.close()
    if (len(rows)):
        if (str(rows[0][2]) == '-1'):
            cursor = db_conn.cursor()
            cursor.execute("UPDATE marks SET mark=0 \
                WHERE file_id='{}' AND user_id={}".format(file_id, str(user_id)))
            cursor.execute("UPDATE resources SET rating=rating+1 \
                WHERE file_id='{}'".format(file_id))
            cursor.close()
        else:
            cursor = db_conn.cursor()
            cursor.execute("UPDATE marks SET mark=-1 \
                WHERE file_id='{}' AND user_id={}".format(file_id, str(user_id)))
            if (str(rows[0][2]) == '0'):
                cursor.execute("UPDATE resources SET rating=rating-1 \
                WHERE file_id='{}'".format(file_id))
            else:
                cursor.execute("UPDATE resources SET rating=rating-2 \
                WHERE file_id='{}'".format(file_id))
            cursor.close()
    else:
        cursor = db_conn.cursor()
        cursor.execute("INSERT INTO marks (file_id, user_id, mark) \
                VALUES ('{}', {}, {})".format(file_id, str(user_id), '-1'))
        cursor.execute("UPDATE resources SET rating=rating-1 \
                WHERE file_id='{}'".format(file_id))
        cursor.close()
    db_conn.commit()
    

@bot.message_handler(commands=['upload'])
def handle_upload(message):
    chat_id = message.chat.id
    if check_verification(message.from_user.id):
        options = {'material': None, 'course': None, 'subject': None, 'file': None}
        about_upload_msg = '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ üì§'
        instruction = bot.send_message(chat_id, about_upload_msg)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_material(user_answer, options))
    else:
        about_upload_msg = '–ó–∞–≥—Ä—É–∂–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ' \
                '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ ' \
                '–∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /cancel'
    
        instruction = bot.send_message(chat_id, about_upload_msg)
        bot.register_next_step_handler(instruction, check_name_surname)


def check_verification(user_id):
    cursor = db_conn.cursor()
    cursor.execute("SELECT verified FROM users \
                WHERE user_id={}".format(user_id))
    rows = cursor.fetchall()
    cursor.close()
    return len(rows) and rows[0][0]

def check_material(message, options):
    chat_id = message.chat.id
    if message.text in commands_list:
        handle_cancel(message, '–∑–∞–≥—Ä—É–∑–∫–∏')
        call(message)
    elif str(message.text)[0] == '/':
        message_failure = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_material(user_answer, options))
    elif message.content_type == 'text' and is_material_correct(message):
        options['material'] = message.text
        message_success = '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫—É—Ä—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_course(user_answer, options))
    else:
        message_failure = '–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ' \
                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_material(user_answer, options))


def check_course(message, options):
    chat_id = message.chat.id
    if message.text in commands_list:
        handle_cancel(message, '–∑–∞–≥—Ä—É–∑–∫–∏')
        call(message)
    elif str(message.text)[0] == '/':
        message_failure = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_course(user_answer, options))
    elif message.content_type == 'text' and is_course_correct(message):
        options['course'] = message.text
        message_success = '–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_subject(user_answer, options))
    else:
        message_failure = '–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ' \
                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_course(user_answer, options))


def check_subject(message, options):
    chat_id = message.chat.id
    if message.text in commands_list:
        handle_cancel(message, '–∑–∞–≥—Ä—É–∑–∫–∏')
        call(message)
    elif str(message.text)[0] == '/':
        message_failure = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_subject(user_answer, options))
    elif message.content_type == 'text' and is_subject_correct(message):
        options['subject'] = message.text
        message_success = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª, –∞ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Å–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É!'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_file(user_answer, options))
    else:
        message_failure = '–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ' \
                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_subject(user_answer, options))


def check_file(message, options):
    chat_id = message.chat.id
    author_id = message.from_user.id
    if message.text in commands_list:
        handle_cancel(message, '–∑–∞–≥—Ä—É–∑–∫–∏')
        call(message)
    elif message.content_type == 'document' and is_file_correct(message):
        file_id = message.document.file_id
        options['file'] = message.document.file_name
        cursor = db_conn.cursor()
        
        cursor.execute("INSERT INTO resources (title, author_id, course, \
        discipline, rating, file_id) VALUES ('{}', {}, \
        {}, '{}', {}, '{}')".format(options['material'], str(author_id), \
        str(options['course']), options['subject'], '0', file_id))

        cursor.close()
        db_conn.commit()
        message_success = '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.'

        bot.send_message(chat_id, message_success)
    else:
        message_failure = '–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ' \
                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_file(user_answer, options))


def check_name_surname(message):
    chat_id = message.chat.id
    if message.text in commands_list:
        handle_cancel(message, '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        call(message)
    elif str(message.text)[0] == '/':
        message_failure = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_name_surname(user_answer, options))
    elif is_name_surname_correct(message):
        message_success = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π –ø–æ—á—Ç—ã –≤ –¥–æ–º–µ–Ω–µ bmstu.ru'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, check_email)
    else:
        message_failure = '–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ' \
                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_name_surname(user_answer, options))


def check_email(message):
    chat_id = message.chat.id
    if message.text in commands_list:
        handle_cancel(message, '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        call(message)
    elif str(message.text)[0] == '/':
        message_failure = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_email(user_answer, options))
    elif is_email_correct(message):
        message_success = '–°—É–ø–µ—Ä! –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏ ' \
                '–º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å —ç—Ç–æ–π –ø–æ—á—Ç—ã –Ω–∞ @bot.bot'
                
        bot.send_message(chat_id, message_success)
    else:
        message_failure = '–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ' \
                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_email(user_answer, options))


@bot.message_handler(commands=['cancel'])
def handle_cancel(message, mode=None):
    chat_id = message.chat.id
    if mode:
        about_cancel_msg = '–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ ' + mode

        bot.send_message(chat_id, about_cancel_msg)


@bot.message_handler(commands=['about'])
def handle_about(message):
    chat_id = message.chat.id
    about_author_msg = '–ê–≤—Ç–æ—Ä—ã —Å—É–ø–µ—Ä'

    bot.send_message(chat_id, about_author_msg)


@bot.message_handler()
def handle_unknown(message):
    chat_id = message.chat.id
    about_unknown_msg = '–ü—Ä–æ—Å—Ç–∏, –¥—Ä—É–∂–æ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(\n–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ ' \
                '–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ /help, –µ—Å–ª–∏ –ø–æ–∑–∞–±—ã–ª, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã!'

    bot.send_message(chat_id, about_unknown_msg)