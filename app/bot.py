import os
import telebot
import psycopg2
import redis
import utils
from check_correct import *

db_conn = psycopg2.connect(os.getenv('DATABASE_URL'), sslmode='require')
redis_conn = redis.Redis.from_url(os.getenv('REDIS_URL'))

bot = telebot.TeleBot(
    os.getenv('TELEGRAM_TOKEN'),
#    next_step_backend=utils.RedisHandlerBackend(redis_conn)
)


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    chat_id = message.chat.id
    about_msg = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å ' \
                '—É–¥–æ–±–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º. –ú—É–¥–ª –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö!\n\n' \
                '–í—ã –º–æ–∂–µ—Ç–µ:\n\n' \
                'üì§ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n' \
                'üîç –ò—Å–∫–∞—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —Ç–µ–º–∞–º\n' \
                'üìà –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–∞–≤–∞—è –¥—Ä—É–≥–∏–º ' \
                '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –¥–æ—Å—Ç–æ–π–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã—Å—Ç—Ä–µ–µ'
    
    bot.send_message(chat_id, about_msg)


@bot.message_handler(commands=['search'])
def handle_search(message):
    options = {}
    chat_id = message.chat.id
    about_search_msg = '–í–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n\n' \
                '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞, –≤–≤–µ–¥–∏—Ç–µ /cancel'

    instruction = bot.send_message(chat_id, about_search_msg)
    bot.register_next_step_handler(instruction, lambda user_answer: check_query(user_answer, options))


def check_query(message):
    chat_id = message.chat.id
    if message.text == '/cancel':
        handle_cancel(message, 'search')
    else:
        number_of_materials = '10'
        message_success = '–ú–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ' + number_of_materials + \
                ' –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n–í–æ—Ç –æ–Ω–∏:\n\n'

        bot.send_message(chat_id, message_success)


@bot.message_handler(commands=['upload'])
def handle_upload(message):
    chat_id = message.chat.id
    if check_verification():
        options = {'material': None, 'course': None, 'subject': None, 'file': None}
        about_upload_msg = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n'
        instruction = bot.send_message(chat_id, about_upload_msg)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_material(user_answer, options))
    else:
        about_upload_msg = '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n\n' \
                '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.\n\n' \
                '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ /cancel'
    
        instruction = bot.send_message(chat_id, about_upload_msg)
        bot.register_next_step_handler(instruction, check_name_surname)


def check_verification():
    return True


def check_material(message, options):
    chat_id = message.chat.id
    if message.text == '/cancel':
        handle_cancel(message, 'upload')
    elif is_material_correct(message):
        options['material'] = message.text
        message_success = '–£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_course(user_answer, options))
    else:
        message_failure = '–£–ø—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_material(user_answer, options))


def check_course(message, options):
    chat_id = message.chat.id
    if message.text == '/cancel':
        handle_cancel(message, 'upload')
    elif is_course_correct(message):
        options['course'] = message.text
        message_success = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_subject(user_answer, options))
    else:
        message_failure = '–£–ø—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_course(user_answer, options))


def check_subject(message, options):
    chat_id = message.chat.id
    if message.text == '/cancel':
        handle_cancel(message, 'upload')
    elif is_subject_correct(message):
        options['subject'] = message.text
        message_success = '–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_file(user_answer, options))
    else:
        message_failure = '–£–ø—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_subject(user_answer, options))


def check_file(message, options):
    chat_id = message.chat.id
    author_id = message.from_user.id
    if message.text == '/cancel':
        handle_cancel(message, 'upload')
    elif message.content_type == 'document' and is_file_correct(message):
        file_id = message.document.file_id
        options['file'] = message.document.file_name
        cursor = db_conn.cursor()
        
        cursor.execute("INSERT INTO resources (title, author_id, course, \
        discipline, rating, type, file_id, link) VALUES ('{0}', {1}, \
        {2}, '{3}', {4}, {5}, '{6}', '{7}')".format(options['material'], str(author_id), \
        str(options['course']), options['subject'], '0', '0', file_id, 'ssilka'))

        cursor.close()
        db_conn.commit()
        message_success = '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.'

        bot.send_message(chat_id, message_success)
    else:
        message_failure = '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_file(user_answer, options))


def check_name_surname(message):
    chat_id = message.chat.id
    if message.text == '/cancel':
        handle_cancel(message, 'upload')
    elif is_name_surname_correct(message):
        message_success = '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ' + str(message.text) + '!\n' \
                '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π –ø–æ—á—Ç—ã –≤ –¥–æ–º–µ–Ω–µ bmstu.ru\n'

        instruction = bot.send_message(chat_id, message_success)
        bot.register_next_step_handler(instruction, check_email)
    else:
        message_failure = '–£–ø—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_name_surname(user_answer, options))


def check_email(message):
    chat_id = message.chat.id
    if message.text == '/cancel':
        handle_cancel(message, 'upload')
    elif is_email_correct:
        message_success = '–û—Ç–ª–∏—á–Ω–æ! –ö–ª–∞—Å—Å–Ω–∞—è –ø–æ—á—Ç–∞!\n' \
                '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å —ç—Ç–æ–π –ø–æ—á—Ç—ã –Ω–∞ bot@bot.bot –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                
        bot.send_message(chat_id, message_success)
    else:
        message_failure = '–£–ø—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!'

        instruction = bot.send_message(chat_id, message_failure)
        bot.register_next_step_handler(instruction, lambda user_answer: \
            check_email(user_answer, options))


@bot.message_handler(commands=['cancel'])
def handle_cancel(message, mode=None):
    chat_id = message.chat.id
    if mode:
        about_cancel_msg = '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ' + mode

        bot.send_message(chat_id, about_cancel_msg)